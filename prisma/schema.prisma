datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String?
  Penalty       String          @default("0")
  books         Book[]
  buyer         Orders?
  payments      StripePayments[]
  borrowedBooks BorrowedBook[]
  notifications Notification[]
  rewardPoints  String          @default("0")
  comments    BookComment[]
  @@map("users")
}


model Notification {
  id      String  @id @default(cuid())
  message String
  user    User    @relation(fields: [userId], references: [id])
  userId  String
}

model Book {
  id          String         @id @default(cuid())
  title       String         @unique
  authorName  String
  description String
  condition   String
  photo       String
  price       String
  status      String
  donation    Boolean
  borrowRate  String
  category    String
  seller      User?          @relation(fields: [sellerId], references: [id])
  sellerId    String?
  borrowedBy  BorrowedBook[]
  createdAt   DateTime       @default(now())
}

model Orders {
  orderID   String   @id @default(cuid())
  bookID    String
  buyer     User     @relation(fields: [buyerId], references: [id])
  buyerId   String   @unique
  status    String
  metaData  Json
  createdAt DateTime @default(now())
}

model StripePayments {
  paymentID   String   @id @default(cuid())
  bookID      String
  buyer       User     @relation(fields: [buyerId], references: [id])
  buyerId     String   
  status      String
  paymentType String
  metaData    Json
  createdAt   DateTime @default(now())
}

model BorrowedBook {
  id            String   @id @default(cuid())
  book          Book     @relation(fields: [bookId], references: [id])
  bookId        String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  status        String
  borrowedAt    DateTime @default(now())
  reserveUserId String?
}

model BookComment {
  id         String    @id @default(cuid())
  comment    String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime  @default(now())
}
